<Page
    x:Class="AppUIBasics.ControlPages.ImplicitTransitionPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:AppUIBasics"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d"
    xmlns:contract7Present="http://schemas.microsoft.com/winfx/2006/xaml/presentation?IsApiContractPresent(Windows.Foundation.UniversalApiContract, 7)">

    <StackPanel Background="{ThemeResource ApplicationPageBackgroundThemeBrush}">
        <local:ControlExample HeaderText="Automatically animate changes to Opacity" MinimumUniversalAPIContract="7">
            <Rectangle x:Name="OpacityRectangle" Width="50" Height="50" Fill="{ThemeResource SystemAccentColor}" VerticalAlignment="Center" Margin="45,5,5,5" Opacity="0.5" />

            <local:ControlExample.Options>
                <StackPanel>
                    <TextBox x:Name="OpacityTextBox" Header="Opacity (0.0 to 1.0)" Text="0.5" Margin="5" KeyDown="TextBox_KeyDown" />
                    <Button Content="Set Opacity" Margin="5" Click="OpacityButton_Click" HorizontalAlignment="Stretch" />
                </StackPanel>
            </local:ControlExample.Options>

            <local:ControlExample.Xaml>
                <RichTextBlock Style="{StaticResource XamlCodeRichTextBlockStyle}">
                    <Paragraph>&lt;!-- Automatically animate changes to Opacity --&gt;</Paragraph>
                    <Paragraph>&lt;Rectangle x:Name="rectangle" Width="50" Height="50" Opacity="0.5"&gt;</Paragraph>
                    <Paragraph TextIndent="12">&lt;Rectangle.OpacityTransition&gt;</Paragraph>
                    <Paragraph TextIndent="24">&lt;ScalarTransition /&gt;</Paragraph>
                    <Paragraph TextIndent="12">&lt;/Rectangle.OpacityTransition&gt;</Paragraph>
                    <Paragraph>&lt;/Rectangle&gt;</Paragraph>
                    <Paragraph />
                    <Paragraph>private void button_Click(object sender, RoutedEventArgs e)</Paragraph>
                    <Paragraph>{</Paragraph>
                    <Paragraph TextIndent="12">rectangle.Opacity = 1.0;</Paragraph>
                    <Paragraph>}</Paragraph>
                </RichTextBlock>
            </local:ControlExample.Xaml>
        </local:ControlExample>

        <local:ControlExample HeaderText="Automatically animate changes to Rotation" MinimumUniversalAPIContract="7">
            <Rectangle x:Name="RotationRectangle" Width="50" Height="50" VerticalAlignment="Center" Margin="45,5,5,5" >
                <Rectangle.Fill>
                    <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                        <GradientStop Color="LightGray" Offset="0.0" />
                        <GradientStop Color="{ThemeResource SystemAccentColor}" Offset="1.0" />
                    </LinearGradientBrush>
                </Rectangle.Fill>
            </Rectangle>

            <local:ControlExample.Options>
                <StackPanel>
                    <TextBox x:Name="RotationTextBox" Header="Rotation (0.0 to 360.0)" Text="45" Margin="5" KeyDown="TextBox_KeyDown" />
                    <Button Content="Set Rotation" Margin="5" Click="RotationButton_Click" HorizontalAlignment="Stretch"/>
                </StackPanel>
            </local:ControlExample.Options>

            <local:ControlExample.Xaml>
                <RichTextBlock Style="{StaticResource XamlCodeRichTextBlockStyle}">
                    <Paragraph>&lt;!-- Automatically animate changes to Rotation --&gt;</Paragraph>
                    <Paragraph>&lt;Rectangle x:Name="rectangle" Width="50" Height="50" Rotation="0" &gt;</Paragraph>
                    <Paragraph TextIndent="12">&lt;Rectangle.RotationTransition&gt;</Paragraph>
                    <Paragraph TextIndent="24">&lt;ScalarTransition /&gt;</Paragraph>
                    <Paragraph TextIndent="12">&lt;/Rectangle.RotationTransition&gt;</Paragraph>
                    <Paragraph>&lt;/Rectangle&gt;</Paragraph>
                    <Paragraph />
                    <Paragraph>private void button_Click(object sender, RoutedEventArgs e)</Paragraph>
                    <Paragraph>{</Paragraph>
                    <Paragraph TextIndent="12">rectangle.Rotation = 45;  // Clockwise, in degrees</Paragraph>
                    <Paragraph>}</Paragraph>
                </RichTextBlock>
            </local:ControlExample.Xaml>
        </local:ControlExample>

        <local:ControlExample HeaderText="Automatically animate changes to Scale" MinimumUniversalAPIContract="7">
            <Rectangle x:Name="ScaleRectangle" Width="50" Height="50" Fill="{ThemeResource SystemAccentColor}" VerticalAlignment="Top" Margin="45,5,5,5" />

            <local:ControlExample.Options>
                <StackPanel>
                    <Button Content="Set Scale to (0.5, 0.5, 0.5)" Tag="0.5" Margin="5" Click="ScaleButton_Click" HorizontalAlignment="Stretch" />
                    <Button Content="Set Scale to (1.0, 1.0, 1.0)" Tag="1.0" Margin="5" Click="ScaleButton_Click" HorizontalAlignment="Stretch" />
                    <Button Content="Set Scale to (2.0, 2.0, 2.0)" Tag="2.0" Margin="5" Click="ScaleButton_Click" HorizontalAlignment="Stretch" />
                    <TextBlock Text="Components" />
                    <CheckBox x:Name="ScaleX" Content="Animate X" IsChecked="True" />
                    <CheckBox x:Name="ScaleY" Content="Animate Y" IsChecked="True" />
                    <CheckBox x:Name="ScaleZ" Content="Animate Z" IsChecked="True" />
                    <TextBox x:Name="ScaleTextBox" Header="Scale (0.0 to 5.0)" Text="1" Margin="5" KeyDown="TextBox_KeyDown" />
                    <Button Content="Set custom scale" Click="ScaleButton_Click" Margin="5" HorizontalAlignment="Stretch" />
                </StackPanel>
            </local:ControlExample.Options>
            <local:ControlExample.Xaml>
                <RichTextBlock Style="{StaticResource XamlCodeRichTextBlockStyle}">
                    <Paragraph>&lt;!-- Automatically animate changes to Scale --&gt;</Paragraph>
                    <Paragraph>&lt;Rectangle x:Name="rectangle" Width="50" Height="50" Scale="1,1,1" &gt;</Paragraph>
                    <Paragraph TextIndent="12">&lt;Rectangle.ScaleTransition&gt;</Paragraph>
                    <Paragraph TextIndent="24">&lt;Vector3Transition /&gt;</Paragraph>
                    <Paragraph TextIndent="12">&lt;/Rectangle.ScaleTransition&gt;</Paragraph>
                    <Paragraph>&lt;/Rectangle&gt;</Paragraph>
                    <Paragraph />
                    <Paragraph>// using System.Numerics;</Paragraph>
                    <Paragraph>private void button_Click(object sender, RoutedEventArgs e)</Paragraph>
                    <Paragraph>{</Paragraph>
                    <Paragraph TextIndent="12">rectangle.Scale = new Vector3(2.0, 2.0, 1.0);</Paragraph>
                    <Paragraph>}</Paragraph>
                </RichTextBlock>
            </local:ControlExample.Xaml>
        </local:ControlExample>

        <local:ControlExample HeaderText="Automatically animate changes to Translation" MinimumUniversalAPIContract="7">
            <Rectangle x:Name="TranslateRectangle" Width="50" Height="50" Fill="{ThemeResource SystemAccentColor}" VerticalAlignment="Top" Margin="45,5,5,5" />

            <local:ControlExample.Options>
                <StackPanel>
                    <Button Content="Set Translation to (0, 0, 0)" Tag="0" Margin="5" Click="TranslateButton_Click" HorizontalAlignment="Stretch" />
                    <Button Content="Set Translation to (100, 100, 100)" Tag="100" Margin="5" Click="TranslateButton_Click" HorizontalAlignment="Stretch" />
                    <Button Content="Set Translation to (200, 200, 200)" Tag="200" Margin="5" Click="TranslateButton_Click" HorizontalAlignment="Stretch" />

                    <TextBlock Text="Components" />
                    <CheckBox x:Name="TranslateX" Content="Animate X" IsChecked="True" />
                    <CheckBox x:Name="TranslateY" Content="Animate Y" IsChecked="True" />
                    <CheckBox x:Name="TranslateZ" Content="Animate Z" IsChecked="True" />
                    <TextBox x:Name="TranslationTextBox" Header="Translation (0.0 to 200.0)" Text="1" Margin="5" KeyDown="TextBox_KeyDown" />
                    <Button Content="Set custom Translation" Margin="5" Click="TranslateButton_Click" HorizontalAlignment="Stretch" />
                </StackPanel>
            </local:ControlExample.Options>
            <local:ControlExample.Xaml>
                <RichTextBlock Style="{StaticResource XamlCodeRichTextBlockStyle}">
                    <Paragraph>&lt;!-- Automatically animate changes to Translation --&gt;</Paragraph>
                    <Paragraph>&lt;Rectangle x:Name="rectangle" Width="50" Height="50" Translation="0,0,0" &gt;</Paragraph>
                    <Paragraph TextIndent="12">&lt;Rectangle.TranslationTransition&gt;</Paragraph>
                    <Paragraph TextIndent="24">&lt;Vector3Transition /&gt;</Paragraph>
                    <Paragraph TextIndent="12">&lt;/Rectangle.TranslationTransition&gt;</Paragraph>
                    <Paragraph>&lt;/Rectangle&gt;</Paragraph>
                    <Paragraph />
                    <Paragraph>// using System.Numerics;</Paragraph>
                    <Paragraph>private void button_Click(object sender, RoutedEventArgs e)</Paragraph>
                    <Paragraph>{</Paragraph>
                    <Paragraph TextIndent="12">rectangle.Translation = new Vector3(100, 100, 0);</Paragraph>
                    <Paragraph>}</Paragraph>
                </RichTextBlock>
            </local:ControlExample.Xaml>
        </local:ControlExample>

        <local:ControlExample HeaderText="Implicitly animate when the Background changes" MinimumUniversalAPIContract="7">
            <ContentPresenter x:Name="BrushPresenter" Background="Blue" Width="50" Height="50" VerticalAlignment="Top" Margin="45,5,5,5" />
            <local:ControlExample.Options>
                <Button Content="Change Background Color" Click="BackgroundButton_Click"  />
            </local:ControlExample.Options>
            <local:ControlExample.Xaml>
                <RichTextBlock Style="{StaticResource XamlCodeRichTextBlockStyle}">
                    <Paragraph>&lt;ContentPresenter x:Name="BrushPresenter" Background="Blue" Width="50" Height="50"&gt;</Paragraph>
                    <Paragraph TextIndent="12">&lt;ContentPresenter.BackgroundTransition&gt;</Paragraph>
                    <Paragraph TextIndent="24">&lt;BrushTransition /&gt;</Paragraph>
                    <Paragraph TextIndent="12">&lt;/ContentPresenter.BackgroundTransition&gt;</Paragraph>
                    <Paragraph>&lt;/ContentPresenter&gt;</Paragraph>
                    <Paragraph />
                    <Paragraph>private void button_Click(object sender, RoutedEventArgs e)</Paragraph>
                    <Paragraph>{</Paragraph>
                    <Paragraph TextIndent="12">// Note that this is a new brush instance, not a new color on the same brush.</Paragraph>
                    <Paragraph TextIndent="12">if (HasBlueBackground(BrushPresenter))</Paragraph>
                    <Paragraph TextIndent="12">{</Paragraph>
                    <Paragraph TextIndent="24">BrushPresenter.Background = new SolidColorBrush(Yellow);</Paragraph>
                    <Paragraph TextIndent="12">}</Paragraph>
                    <Paragraph TextIndent="12">else</Paragraph>
                    <Paragraph TextIndent="12">{</Paragraph>
                    <Paragraph TextIndent="24">BrushPresenter.Background = new SolidColorBrush(Blue);</Paragraph>
                    <Paragraph TextIndent="12">}</Paragraph>
                    <Paragraph>}</Paragraph>
                </RichTextBlock>
            </local:ControlExample.Xaml>
        </local:ControlExample>
    </StackPanel>
</Page>
